/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view_controller;

import java.awt.Frame;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import model.IModel;
import model.Rendeles;
import model.Szemely;

/**
 *
 * @author Gabika
 */
public class RendelesekDialog extends javax.swing.JDialog implements TableModelListener {

    private IModel model;
    private List<Szemely> szemelyek;
    private List<Rendeles> rendelesek;
    private DefaultTableModel dtm;
    private Frame parent;

    public RendelesekDialog(java.awt.Frame parent, boolean modal, IModel model) {
        super(parent, modal);
        initComponents();

        setLocationRelativeTo(parent);
        setTitle("Rendelések kezelése");

        this.parent = parent;
        this.model = model;

        dtm = (DefaultTableModel) tblRendelesek.getModel();
        dtm.addTableModelListener(this);

        try {
            szemelyek = model.getSzemelyek();
            cbMegrendelok.setModel(new DefaultComboBoxModel(new Vector<>(szemelyek)));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex, "Adatbázis hiba", JOptionPane.ERROR_MESSAGE);
        }

        keres();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblRendelesek = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        cbMegrendelok = new javax.swing.JComboBox<>();
        btnUj = new javax.swing.JButton();
        btnTorles = new javax.swing.JButton();
        btnOk = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblRendelesek.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Rendelő ID", "Összeg", "Darabszám", "Teljesítve"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRendelesek);

        jLabel1.setText("Megrendelő");

        cbMegrendelok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMegrendelokActionPerformed(evt);
            }
        });

        btnUj.setText("Új");
        btnUj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUjActionPerformed(evt);
            }
        });

        btnTorles.setText("Törlés");
        btnTorles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTorlesActionPerformed(evt);
            }
        });

        btnOk.setText("OK");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(30, 30, 30)
                        .addComponent(cbMegrendelok, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnUj, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnOk, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnTorles, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(21, 21, 21))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnOk, btnTorles, btnUj});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUj)
                        .addGap(18, 18, 18)
                        .addComponent(btnTorles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnOk))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbMegrendelok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTorlesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTorlesActionPerformed
        int rendelesIndex = tblRendelesek.getSelectedRow();

        if (rendelesIndex >= 0) {
            Rendeles kivalasztott = rendelesek.get(rendelesIndex);

            int valasz = JOptionPane.showConfirmDialog(parent, "Biztosan törölni akarod?",
                    "Törlés megerősítés", JOptionPane.YES_NO_OPTION);

            if (valasz == JOptionPane.YES_OPTION) {
                try {
                    model.removRendeles(kivalasztott);
                    keres();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, ex, "Adatbázis hiba", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(parent, "Válassz a listából",
                    "Nincs kiválasztott", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnTorlesActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        setVisible(false);
    }//GEN-LAST:event_btnOkActionPerformed

    private void cbMegrendelokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMegrendelokActionPerformed
        keres();
    }//GEN-LAST:event_cbMegrendelokActionPerformed

    private void keres() {
        Szemely kivalasztott = (Szemely) cbMegrendelok.getSelectedItem();

        try {
            rendelesek = model.getSzemelyRendelesek(kivalasztott);
            tablaFeltolt();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex, "Adatbázis hiba", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btnUjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUjActionPerformed
        Szemely kivalasztott = (Szemely) cbMegrendelok.getSelectedItem();
        RendelesAdatokDialog rad = new RendelesAdatokDialog(parent, true, kivalasztott);
        rad.setVisible(true);

        if (rad.isMentes()) {
            try {
                model.addRendeles(rad.getRendeles());

                keres();

            } catch (SQLException ex) {
                Logger.getLogger(RendelesekDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnUjActionPerformed

    public void tablaFeltolt() {
        dtm.getDataVector().clear();

        for (Rendeles r : rendelesek) {

            Vector sor = new Vector();
            sor.add(r.getRendeloId());
            sor.add(r.getOsszeg());
            sor.add(r.getDarabszam());
            sor.add(r.isTeljesitve());

            dtm.addRow(sor);
        }

        dtm.fireTableDataChanged();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnTorles;
    private javax.swing.JButton btnUj;
    private javax.swing.JComboBox<Szemely> cbMegrendelok;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblRendelesek;
    // End of variables declaration//GEN-END:variables

    @Override
    public void tableChanged(TableModelEvent e) {
        int sor = e.getFirstRow();
        int oszlop = e.getColumn();

        if (e.getType() == TableModelEvent.UPDATE && sor >= 0 && oszlop >= 0) {
            Rendeles kivalasztott = rendelesek.get(sor);

            Object ujErtek = dtm.getValueAt(sor, oszlop);

            switch (oszlop) {
                case 1:
                    kivalasztott.setOsszeg((Integer) ujErtek);
                    break;
                case 2:
                    kivalasztott.setDarabszam((Integer) ujErtek);
                    break;
                case 3:
                    kivalasztott.setTeljesitve((Boolean) ujErtek);
                    break;
            }
            try {
                model.updateRendeles(kivalasztott);
                keres();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, ex, "Adatbázis hiba", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}
